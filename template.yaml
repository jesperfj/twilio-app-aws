AWSTemplateFormatVersion: "2010-09-09"
Description: "Twilio Gateway"

Resources:
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${AWS::StackName}-gateway"
      Description: "Twilio Callback API Gateway"
  
  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !GetAtt "apiGateway.RootResourceId"
      RestApiId: !Ref "apiGateway"
      HttpMethod: "ANY"
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        PassthroughBehavior: WHEN_NO_MATCH
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunction.Arn"

  apiGatewayProxyResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref "apiGateway"
      ParentId: !GetAtt "apiGateway.RootResourceId"
      PathPart: "{proxy+}"

  apiGatewayProxyMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref "apiGatewayProxyResource"
      RestApiId: !Ref "apiGateway"
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        CacheKeyParameters:
          - 'method.request.path.proxy'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        IntegrationHttpMethod: "POST"
        Type: AWS_PROXY
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunction.Arn"


  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event,context):
            return {
              'body': 'Hello there {0}'.format(event['requestContext']['identity']['sourceIp']),
              'headers': {
                'Content-Type': 'text/plain'
              },
              'statusCode': 200
            }
      Description: "My function"
      FunctionName: !Sub "${AWS::StackName}-router-function"
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python2.7"
      Timeout: 10

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*"

  lambdaApiGatewayInvokeProxy:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/*"


  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-router-function:*"
          PolicyName: "lambda"

  gatewayLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}"
      RetentionInDays: 90

  apiGatewayProductionStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt "gatewayLogGroup.Arn"
        Format: "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] \"$context.httpMethod $context.path $context.protocol\" $context.status $context.responseLength $context.requestId"
#      CacheClusterEnabled: Boolean
#      CacheClusterSize: String
#      CanarySetting: CanarySetting
#      ClientCertificateId: String
      DeploymentId: !Ref apiGatewayDeployment
#      Description: String
#      DocumentationVersion: String
      MethodSettings: [{HttpMethod: '*', ResourcePath: '/*', DataTraceEnabled: true, LoggingLevel: INFO, MetricsEnabled: true, ThrottlingBurstLimit: 5000, ThrottlingRateLimit: 10000.0}]
      RestApiId: !Ref "apiGateway"
      StageName: "p"
#      Tags: 
#        - Resource Tag
      TracingEnabled: true
#      Variables:
#        String: String      

  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayRootMethod"
      - "apiGatewayProxyMethod"
      - "lambdaFunction"
    Properties:
      RestApiId: !Ref "apiGateway"


Outputs:
  apiGatewayInvokeURL:
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/p"

  lambdaArn:
    Value: !GetAtt "lambdaFunction.Arn"
